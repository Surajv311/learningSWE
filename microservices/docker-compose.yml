#
#version: '3'
#networks:
#  service_network:
#    name: service_compose_network
#
#services:
#
#  debezium:
##    build:
##      context: ./temp_debezium
##      dockerfile: Dockerfile
##    ports:
##      - "8083:8083"
##    networks:
##      - service_network
#    image: debezium/connect:latest
#    container_name: debezium
#    ports:
#      - "8083:8083"
#    environment:
#      DEBEZIUM_KAFKA_CONNECT_URL: kafka:9092
#    networks:
#      - service_network
#    volumes:
#      - ./debezium/setup.sh:/setup.sh
#    command: ["bash", "/setup.sh"]
#
##  kafka:
###    build:
###      context: ./temp_kafka
###      dockerfile: Dockerfile
##    image: apache/kafka:3.7.0  # Use the official Kafka image
##    ports:
##      - "9092:9092"
##    environment:
##      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
###    depends_on:
###      - zookeeper
##    networks:
##      - service_network
##    image: confluentinc/cp-kafka:latest
##    container_name: kafka
##    depends_on:
##      - zookeeper
##    environment:
##      KAFKA_BROKER_ID: 1
##      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
##      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
##      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
##      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
##      KAFKA_LOG_DIRS: /var/lib/kafka/data
##    ports:
##      - "9092:9092"
##    networks:
##      - service_network
#
##  zookeeper:
##    build:
##      context: ./temp_zookeeper
##      dockerfile: Dockerfile
##    ports:
##      - "2181:2181"
##    networks:
##      - service_network
##    image: confluentinc/cp-zookeeper:latest
##    container_name: zookeeper
##    ports:
##      - "2181:2181"
##    networks:
##      - service_network

#version: '3.8'
#
#services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    ports:
#      - "9092:9092"
#      - "29092:29092"


version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  debezium:
    image: quay.io/debezium/connect:latest
#    image: debezium/connect:latest
    container_name: debezium
#    depends_on:
#      kafka:
#        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
    ports:
      - "8083:8083"

#  airbyte-server:
#    image: airbyte/airbyte-server:latest
#    ports:
#      - "8000:8000"
#    volumes:
#      - ./data:/data
#    environment:
#      - WORKER_ENV=prod
#
#  airbyte-db:
#    image: postgres:latest
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: airbyte
#    volumes:
#      - airbyte-db-data:/var/lib/postgresql/data
#
#  airbyte-scheduler:
#    image: airbyte/airbyte-scheduler:latest
#    depends_on:
#      - airbyte-server
#      - airbyte-db
#    environment:
#      - WORKER_ENV=prod
#
#  airbyte-webapp:
#    image: airbyte/airbyte-webapp:latest
#    depends_on:
#      - airbyte-server
#    ports:
#      - "3000:80"
#
#  nifi:
#    image: apache/nifi:latest
#    container_name: nifi_service
#    ports:
#      - "8080:8080"
#    environment:
#      NIFI_WEB_HTTP_PORT: 8080
#
#volumes:
#  airbyte-db-data:

networks:
  default:
    name: service_network
